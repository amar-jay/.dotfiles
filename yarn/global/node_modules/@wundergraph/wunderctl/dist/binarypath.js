"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.wunderctlBinaryPath = exports.binaryDir = exports.wunderctlName = exports.downloadURL = void 0;
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const isWin = process.platform === 'win32';
const downloadURL = (version) => {
    const osType = os_1.default.type();
    const osArch = os_1.default.arch();
    switch (osType) {
        case 'Darwin':
            switch (osArch) {
                case 'arm64':
                    return `https://github.com/wundergraph/wundergraph/releases/download/v${version}/wunderctl_${version}_Darwin_arm64.tar.gz`;
                case 'x64':
                    return `https://github.com/wundergraph/wundergraph/releases/download/v${version}/wunderctl_${version}_Darwin_x86_64.tar.gz`;
                default:
                    throw new Error(`os arch unsupported: ${osType} ${osArch}`);
            }
        case 'Linux':
            switch (osArch) {
                case 'x64':
                    return `https://github.com/wundergraph/wundergraph/releases/download/v${version}/wunderctl_${version}_Linux_x86_64.tar.gz`;
                case 'x32':
                    return `https://github.com/wundergraph/wundergraph/releases/download/v${version}/wunderctl_${version}_Linux_i386.tar.gz`;
                default:
                    throw new Error(`os arch unsupported: ${osType} ${osArch}`);
            }
        case 'Windows_NT':
            switch (osArch) {
                case 'x64':
                    return `https://github.com/wundergraph/wundergraph/releases/download/v${version}/wunderctl_${version}_Windows_x86_64.tar.gz`;
                case 'x32':
                    return `https://github.com/wundergraph/wundergraph/releases/download/v${version}/wunderctl_${version}_Windows_i386.tar.gz`;
                default:
                    throw new Error(`os arch unsupported: ${osType} ${osArch}`);
            }
        default:
            throw new Error(`os type unsupported: ${osType}`);
    }
};
exports.downloadURL = downloadURL;
const wunderctlName = () => {
    let binaryName = 'wunderctl';
    if (isWin) {
        binaryName = 'wunderctl.exe';
    }
    return binaryName;
};
exports.wunderctlName = wunderctlName;
exports.binaryDir = path_1.default.join(__dirname, '..', 'download');
const wunderctlBinaryPath = () => {
    return path_1.default.join(exports.binaryDir, (0, exports.wunderctlName)());
};
exports.wunderctlBinaryPath = wunderctlBinaryPath;
