"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.installer = void 0;
const axios_1 = __importDefault(require("axios"));
const tar_1 = require("tar");
const binarypath_1 = require("./binarypath");
const fs = __importStar(require("fs"));
const rimraf_1 = __importDefault(require("rimraf"));
const logger_1 = require("./logger");
const path_1 = __importDefault(require("path"));
const installer = async (version, installDir, binaryName) => {
    const log = logger_1.logger.extend('install');
    const error = logger_1.logger.extend('error:install');
    const lockFile = path_1.default.join(installDir, 'download-lock');
    const locker = LockFile(version, lockFile);
    if (locker.exists()) {
        log(`Lock file already exists, skipping the download of the binary ${version}`);
        return;
    }
    if (!fs.existsSync(installDir)) {
        fs.mkdirSync(installDir, { recursive: true });
    }
    locker.create();
    const binaryPath = path_1.default.join(installDir, binaryName);
    if (fs.existsSync(binaryPath)) {
        log(`removing existing binary at ${binaryPath}`);
        (0, rimraf_1.default)(binaryPath, (err) => {
            if (err) {
                locker.remove();
                error('error uninstalling previous version');
                return;
            }
            log('previous version uninstalled');
        });
    }
    try {
        const url = (0, binarypath_1.downloadURL)(version);
        log(`download binary from ${url}`);
        const res = await (0, axios_1.default)({ url, responseType: 'stream' });
        const outStream = (0, tar_1.x)({ C: installDir });
        res.data.pipe(outStream);
        outStream.addListener('finish', () => {
            log(`wunderctl v${version} installed/updated`);
            log(`make binary executable`);
            chmodX(binaryPath);
        });
        outStream.addListener('error', (err) => {
            error('Error installing wunderctl: ' + err.message);
            locker.remove();
        });
    }
    catch (e) {
        locker.remove();
        error('Error installing wunderctl: ' + e.message);
    }
};
exports.installer = installer;
function LockFile(version, lockFile) {
    let createdLockFile = false;
    return {
        create: () => {
            if (createdLockFile) {
                return;
            }
            fs.writeFileSync(lockFile, version);
            createdLockFile = true;
        },
        remove: () => {
            if (!createdLockFile) {
                return;
            }
            fs.unlinkSync(lockFile);
            createdLockFile = false;
        },
        exists: () => {
            if (fs.existsSync(lockFile)) {
                const data = fs.readFileSync(lockFile, 'utf-8');
                if (data === version) {
                    return true;
                }
                return false;
            }
        },
    };
}
function chmodX(filename) {
    const s = fs.statSync(filename);
    const newMode = s.mode | 64 | 8 | 1;
    if (s.mode === newMode)
        return;
    const base8 = newMode.toString(8).slice(-3);
    fs.chmodSync(filename, base8);
}
