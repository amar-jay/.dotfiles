#!/usr/bin/env node
"use strict";import ft from"path";import gt from"fs-extra";import H from"chalk";import{Command as St}from"commander";import b from"inquirer";import D from"path";import{fileURLToPath as It}from"url";var kt=It(import.meta.url),jt=D.dirname(kt),c=D.join(jt,"../"),E=`   ___ ___ ___   __ _____ ___   _____ ____    __   ___ ___
  / __| _ \\ __| /  \\_   _| __| |_   _|__ /   /  \\ | _ \\ _ \\
 | (__|   / _| / /\\ \\| | | _|    | |  |_ \\  / /\\ \\|  _/  _/
  \\___|_|_\\___|_/\u203E\u203E\\_\\_| |___|   |_| |___/ /_/\u203E\u203E\\_\\_| |_|
`,M="my-t3-app",N="create-t3-app";import j from"path";import J from"fs-extra";var G=async({projectDir:t,packages:e})=>{let o=e==null?void 0:e.nextAuth.inUse,s=e==null?void 0:e.prisma.inUse,a=j.join(c,"template/addons/env"),n="";switch(!0){case(o&&s):n="auth-prisma-schema.mjs";break;case o:n="auth-schema.mjs";break;case s:n="prisma-schema.mjs";break}if(!n)return;let l=j.join(a,n),r=j.join(t,"src/env/schema.mjs"),p=j.join(t,".env-example"),f=j.join(t,".env");await Promise.all([J.copy(l,r,{overwrite:!0}),J.rename(p,f)])};import w from"path";import T from"fs-extra";var F=async({projectDir:t,runPkgManagerInstall:e,packages:o})=>{await e({packages:["next-auth",o!=null&&o.prisma.inUse?"@next-auth/prisma-adapter":""]});let s=w.join(c,"template/addons/next-auth"),a=w.join(s,o!=null&&o.prisma.inUse?"api-handler-prisma.ts":"api-handler.ts"),n=w.join(t,"src/pages/api/auth/[...nextauth].ts"),l=w.join(s,"restricted.ts"),r=w.join(t,"src/pages/api/restricted.ts"),p=w.join(s,"next-auth.d.ts"),f=w.join(t,"src/types/next-auth.d.ts");await Promise.all([T.copy(a,n),T.copy(l,r),T.copy(p,f)])};import d from"path";import v from"fs-extra";import{exec as vt}from"child_process";import{promisify as bt}from"util";var g=bt(vt);var W=async({projectDir:t,runPkgManagerInstall:e,pkgManager:o,packages:s,noInstall:a})=>{await e({packages:["prisma"],devMode:!0}),await e({packages:["@prisma/client"]});let n=d.join(c,"template/addons/prisma"),l=d.join(n,s!=null&&s.nextAuth.inUse?"auth-schema.prisma":"schema.prisma"),r=d.join(t,"prisma/schema.prisma"),p=d.join(n,"client.ts"),f=d.join(t,"src/server/db/client.ts"),u=d.join(n,"sample-api.ts"),x=d.join(t,"src/pages/api/examples.ts"),y=d.join(t,"package.json"),O=v.readJSONSync(y);if(O.scripts.postinstall="prisma generate",await Promise.all([v.copy(l,r),v.copy(p,f),v.copy(u,x),v.writeJSON(y,O,{spaces:2})]),!a){let R=o==="npm"?"npx prisma generate":`${o} prisma generate`;await g(R,{cwd:t})}};import P from"path";import C from"fs-extra";var z=async({projectDir:t,runPkgManagerInstall:e})=>{await e({packages:["tailwindcss","postcss","autoprefixer"],devMode:!0});let o=P.join(c,"template/addons/tailwind"),s=P.join(o,"tailwind.config.cjs"),a=P.join(t,"tailwind.config.cjs"),n=P.join(o,"postcss.config.cjs"),l=P.join(t,"postcss.config.cjs"),r=P.join(o,"globals.css"),p=P.join(t,"src/styles/globals.css");await Promise.all([C.copy(s,a),C.copy(n,l),C.copy(r,p)])};import m from"path";import _ from"fs-extra";var L=async({projectDir:t,packages:e,runPkgManagerInstall:o})=>{await o({packages:["react-query@3.39.2","superjson","@trpc/server","@trpc/client","@trpc/next","@trpc/react"]});let s=e==null?void 0:e.nextAuth.inUse,a=e==null?void 0:e.prisma.inUse,n=m.join(c,"template/addons/trpc"),l=m.join(n,"api-handler.ts"),r=m.join(t,"src/pages/api/trpc/[trpc].ts"),p=m.join(n,"utils.ts"),f=m.join(t,"src/utils/trpc.ts"),u=s&&a?"auth-prisma-context.ts":s&&!a?"auth-context.ts":!s&&a?"prisma-context.ts":"base-context.ts",x=m.join(n,u),y=m.join(t,"src/server/router/context.ts"),O=s?"auth-index-router.ts":"index-router.ts",R=m.join(n,O),ut=m.join(t,"src/server/router/index.ts"),dt=a?"example-prisma-router.ts":"example-router.ts",ht=m.join(n,dt),xt=m.join(t,"src/server/router/example.ts"),yt=m.join(n,"protected-example-router.ts"),wt=m.join(t,"src/server/router/protected-example-router.ts"),Pt=m.join(n,"protected-router.ts"),_t=m.join(t,"src/server/router/protected-router.ts");await Promise.all([_.copy(l,r),_.copy(p,f),_.copy(x,y),_.copy(R,ut),_.copy(ht,xt),...s?[_.copy(yt,wt),_.copy(Pt,_t)]:[]])};var K=["nextAuth","prisma","tailwind","trpc","envVariables"],V=t=>({nextAuth:{inUse:t.includes("nextAuth"),installer:F},prisma:{inUse:t.includes("prisma"),installer:W},tailwind:{inUse:t.includes("tailwind"),installer:z},trpc:{inUse:t.includes("trpc"),installer:L},envVariables:{inUse:t.includes("prisma")||t.includes("nextAuth"),installer:G}});import At from"path";import Ot from"fs-extra";var B=()=>{let t=At.join(c,"package.json");return Ot.readJSONSync(t).version??"1.0.0"};var h=()=>{let t=process.env.npm_config_user_agent;return t!=null&&t.startsWith("yarn")?"yarn":t!=null&&t.startsWith("pnpm")?"pnpm":"npm"};import S from"chalk";var i={error(...t){console.log(S.red(...t))},warn(...t){console.log(S.yellow(...t))},info(...t){console.log(S.cyan(...t))},success(...t){console.log(S.green(...t))}};var Mt=/^(?:@[a-z0-9-*~][a-z0-9-*._~]*\/)?[a-z0-9-~][a-z0-9-._~]*$/,Y=t=>{let e=t.split("/"),o=e.findIndex(a=>a.startsWith("@")),s=e[e.length-1];return e.findIndex(a=>a.startsWith("@"))!==-1&&(s=e.slice(o).join("/")),Mt.test(s??"")?!0:"App name must be lowercase, alphanumeric, and only use -, _, and @"};var q={appName:M,packages:["nextAuth","prisma","tailwind","trpc"],flags:{noGit:!1,noInstall:!1,default:!1}},X=async()=>{var a;let t=q,e=new St().name(N);e.description("A CLI for creating web applications with the t3 stack").argument("[dir]","The name of the application, as well as the name of the directory to create").option("--noGit","Explicitly tell the CLI to not initialize a new git repo in the project",!1).option("--noInstall","Explicitly tell the CLI to not run the package manager's install command",!1).option("-y, --default","Bypass the CLI and use all default options to bootstrap a new t3-app",!1).version(B(),"-v, --version","Display the version number").addHelpText("afterAll",`
 The t3 stack was inspired by ${H.hex("#E8DCFF").bold("@t3dotgg")} and has been used to build awesome fullstack applications like ${H.hex("#E24A8D").underline("https://ping.gg")} 
`).parse(process.argv),(a=process.env.npm_config_user_agent)!=null&&a.startsWith("yarn/3")&&i.warn(`  WARNING: It looks like you are using Yarn 3. This is currently not supported,
  and likely to result in a crash. Please run create-t3-app with another
  package manager such as pnpm, npm, or Yarn Classic.
  See: https://github.com/t3-oss/create-t3-app/issues/57`),process.versions.node.startsWith("18")&&(i.warn(`  WARNING: You are using Node.js version 18. This is currently not compatible with Next-Auth.
  If you want to use Next-Auth, switch to a previous version of Node, e.g. 16 (LTS).
  If you have nvm installed, use 'nvm install --lts' to switch to the latest LTS version of Node.
    `),t.packages=t.packages.filter(n=>n!=="nextAuth"));let o=e.args[0];o&&(t.appName=o),t.flags=e.opts();let s=h();try{if(!t.flags.default){if(!o){let{appName:r}=await b.prompt({name:"appName",type:"input",message:"What will your project be called?",default:q.appName,validate:Y,transformer:p=>p.trim()});t.appName=r}let{language:n}=await b.prompt({name:"language",type:"list",message:"Will you be using JavaScript or TypeScript?",choices:[{name:"TypeScript",value:"typescript",short:"TypeScript"},{name:"JavaScript",value:"javascript",short:"TypeScript"}],default:"typescript"});n==="javascript"?i.error("Wrong answer, using TypeScript instead..."):i.success("Good choice! Using TypeScript!");let{packages:l}=await b.prompt({name:"packages",type:"checkbox",message:"Which packages would you like to enable?",choices:K.filter(r=>r!=="envVariables").map(r=>({name:r,checked:!1,disabled:r==="nextAuth"&&process.versions.node.startsWith("18")?"Node.js version 18 is currently not compatible with Next-Auth.":!1}))});if(t.packages=l,!t.flags.noGit){let{git:r}=await b.prompt({name:"git",type:"confirm",message:"Initialize a new git repository?",default:!0});r?i.success("Nice one! Initializing repository!"):(t.flags.noGit=!0,i.info("Sounds good! You can come back and run git init later."))}if(!t.flags.noInstall){let{runInstall:r}=await b.prompt({name:"runInstall",type:"confirm",message:`Would you like us to run ${s} install?`,default:!0});r?i.success("Alright. We'll install the dependencies for you!"):(t.flags.noInstall=!0,i.info(`No worries. You can run '${s} install' later to install the dependencies.`))}}}catch(n){if(n instanceof Error&&n.isTTYError)i.warn(`${N} needs an interactive terminal to provide options`),i.info(`Bootstrapping a default t3 app in ./${t.appName}`);else throw n}return t};import $t from"path";import Q from"chalk";import Rt from"ora";var Z=async t=>{let{packages:e,noInstall:o}=t;i.info(`${o?"Adding":"Installing"} packages...`);for(let[s,a]of Object.entries(e))if(a.inUse){let n=Rt(`${o?"Adding":"Installing"} ${s}...`).start();await a.installer(t),n.succeed(Q.green(`Successfully ${o?"added":"installed"} ${Q.green.bold(s)}`))}i.info("")};import $ from"path";import I from"chalk";import A from"fs-extra";import Nt from"inquirer";import Tt from"ora";var tt=async({projectName:t,projectDir:e,pkgManager:o,noInstall:s})=>{let a=$.join(c,"template/base");s?i.info(""):i.info(`
Using: ${I.cyan.bold(o)}
`);let n=Tt(`Scaffolding in: ${e}...
`).start();if(A.existsSync(e))if(A.readdirSync(e).length===0)n.info(`${I.cyan.bold(t)} exists but is empty, continuing...
`);else{n.stopAndPersist();let{overwriteDir:l}=await Nt.prompt({name:"overwriteDir",type:"confirm",message:`${I.redBright.bold("Warning:")} ${I.cyan.bold(t)} already exists and isn't empty. Do you want to overwrite it?`,default:!1});l?(n.info(`Emptying ${I.cyan.bold(t)} and creating t3 app..
`),A.emptyDirSync(e)):(n.fail("Aborting installation..."),process.exit(0))}n.start(),await A.copy(a,e),await A.rename($.join(e,"_gitignore"),$.join(e,".gitignore")),s||await g(`${o} install`,{cwd:e}),n.succeed(`${I.cyan.bold(t)} scaffolded successfully!
`)};import k from"path";import et from"fs-extra";var nt=async({projectDir:t,packages:e})=>{let o=k.join(c,"template/page-studs/_app"),s=e.trpc.inUse,a=e.nextAuth.inUse,n="";if(a&&s?n="with-auth-trpc.tsx":a&&!s?n="with-auth.tsx":!a&&s&&(n="with-trpc.tsx"),n!==""){let l=k.join(o,n),r=k.join(t,"src/pages/_app.tsx");await et.copy(l,r)}},st=async({projectDir:t,packages:e})=>{let o=k.join(c,"template/page-studs/index"),s=e.trpc.inUse,a=e.tailwind.inUse,n=e.nextAuth.inUse,l=e.prisma.inUse,r="";if(s&&a&&n&&!l?r="with-auth-trpc-tw.tsx":s&&!a&&n&&!l?r="with-auth-trpc.tsx":s&&a?r="with-trpc-tw.tsx":s&&!a?r="with-trpc.tsx":!s&&a&&(r="with-tw.tsx"),r!==""){let p=k.join(o,r),f=k.join(t,"src/pages/index.tsx");await et.copy(p,f)}};import ot from"path";import at from"fs-extra";var Ct=async t=>{let{pkgManager:e,devMode:o,projectDir:s,packages:a,noInstallMode:n}=t;if(n){let f=await at.readJSON(ot.join(s,"package.json"));for(let u of a){if(u==="")continue;let{stdout:x}=await g(`npm show ${u} version`);if(!x){i.warn("WARN: Failed to resolve latest version of package:",u);continue}let y=u.replace(/^(@?[^@]+)(?:@.+)?$/,"$1");o?f.devDependencies[y]=`^${x.trim()}`:f.dependencies[y]=`^${x.trim()}`}await at.writeJSON(ot.join(s,"package.json"),f,{spaces:2});return}let p=`${e==="yarn"?`${e} add`:`${e} install`} ${o?"-D":""} ${a.join(" ")}`;await g(p,{cwd:s})},rt=t=>async o=>Ct({...t,...o});var it=async({projectName:t,packages:e,noInstall:o})=>{let s=h(),a=$t.resolve(process.cwd(),t),n=rt({projectDir:a,pkgManager:s,devMode:!1,noInstallMode:o});return await tt({projectName:t,projectDir:a,pkgManager:s,noInstall:o,runPkgManagerInstall:n}),await Z({projectDir:a,pkgManager:s,packages:e,noInstall:o,runPkgManagerInstall:n}),await nt({projectDir:a,packages:e}),await st({projectDir:a,packages:e}),a};import U from"chalk";import Ut from"ora";var lt=async t=>{i.info("Initializing Git...");let e=Ut(`Creating a new git repo...
`).start();try{let o="git init --initial-branch=main",{stdout:s}=await g("git --version"),a=s.split(" ")[2],n=a==null?void 0:a.split(".")[0],l=a==null?void 0:a.split(".")[1];(Number(n)<2||Number(l)<28)&&(o="git init && git branch -m main"),await g(o,{cwd:t}),e.succeed(`${U.green("Successfully initialized")} ${U.green.bold("git")}
`)}catch{e.fail(`${U.bold.red("Failed:")} could not initialize git. Update git to the latest version!
`)}};var pt=({projectName:t=M,packages:e,noInstall:o})=>{let s=h();i.info("Next steps:"),i.info(`  cd ${t}`),o&&i.info(`  ${s} install`),e!=null&&e.prisma.inUse&&i.info(`  ${s==="npm"?"npx":s} prisma db push`),i.info(`  ${s==="npm"?"npm run":s} dev`)};var ct=t=>{let e=t.split("/"),o=e[e.length-1];o==="."&&(o=process.cwd().split("/").pop());let s=e.findIndex(n=>n.startsWith("@"));e.findIndex(n=>n.startsWith("@"))!==-1&&(o=e.slice(s).join("/"));let a=e.filter(n=>!n.startsWith("@")).join("/");return[o,a]};import Dt from"gradient-string";var Et={blue:"#add7ff",cyan:"#89ddff",green:"#5de4c7",magenta:"#fae4fc",red:"#d0679d",yellow:"#fffac2"},mt=()=>{let t=Dt(Object.values(Et)),e=h();(e==="yarn"||e==="pnpm")&&console.log(""),console.log(t.multiline(E))};var Jt=async()=>{mt();let{appName:t,packages:e,flags:{noGit:o,noInstall:s}}=await X(),a=V(e),[n,l]=ct(t),r=await it({projectName:l,packages:a,noInstall:s});o||await lt(r),pt({projectName:l,packages:a,noInstall:s});let p=await gt.readJSON(ft.join(r,"package.json"));p.name=n,await gt.writeJSON(ft.join(r,"package.json"),p,{spaces:2}),process.exit(0)};Jt().catch(t=>{i.error("Aborting installation..."),t instanceof Error?i.error(t):(i.error("An unknown error has occurred. Please open an issue on github with the below:"),console.log(t)),process.exit(1)});
//# sourceMappingURL=index.js.map