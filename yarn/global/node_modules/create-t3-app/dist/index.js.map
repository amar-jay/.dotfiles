{"version":3,"sources":["../src/index.ts","../src/cli/index.ts","../src/consts.ts","../src/installers/envVars.ts","../src/installers/next-auth.ts","../src/installers/prisma.ts","../src/utils/execAsync.ts","../src/installers/tailwind.ts","../src/installers/trpc.ts","../src/installers/index.ts","../src/utils/getT3Version.ts","../src/utils/getUserPkgManager.ts","../src/utils/logger.ts","../src/utils/validateAppName.ts","../src/helpers/createProject.ts","../src/helpers/installPackages.ts","../src/helpers/scaffoldProject.ts","../src/helpers/selectBoilerplate.ts","../src/utils/runPkgManagerInstall.ts","../src/helpers/initGit.ts","../src/helpers/logNextSteps.ts","../src/utils/parseNameAndPath.ts","../src/utils/renderTitle.ts"],"sourcesContent":["#!/usr/bin/env node\nimport type { PackageJson } from \"type-fest\";\nimport path from \"path\";\nimport fs from \"fs-extra\";\nimport { runCli } from \"~/cli/index.js\";\nimport { createProject } from \"~/helpers/createProject.js\";\nimport { initializeGit } from \"~/helpers/initGit.js\";\nimport { logNextSteps } from \"~/helpers/logNextSteps.js\";\nimport { buildPkgInstallerMap } from \"~/installers/index.js\";\nimport { logger } from \"~/utils/logger.js\";\nimport { parseNameAndPath } from \"~/utils/parseNameAndPath.js\";\nimport { renderTitle } from \"~/utils/renderTitle.js\";\n\nconst main = async () => {\n  renderTitle();\n\n  const {\n    appName,\n    packages,\n    flags: { noGit, noInstall },\n  } = await runCli();\n\n  const usePackages = buildPkgInstallerMap(packages);\n\n  // e.g. dir/@mono/app returns [\"@mono/app\", \"dir/app\"]\n  const [scopedAppName, appDir] = parseNameAndPath(appName);\n\n  const projectDir = await createProject({\n    projectName: appDir,\n    packages: usePackages,\n    noInstall,\n  });\n\n  if (!noGit) {\n    await initializeGit(projectDir);\n  }\n\n  logNextSteps({ projectName: appDir, packages: usePackages, noInstall });\n  const pkgJson = (await fs.readJSON(\n    path.join(projectDir, \"package.json\"),\n  )) as PackageJson;\n  pkgJson.name = scopedAppName;\n  await fs.writeJSON(path.join(projectDir, \"package.json\"), pkgJson, {\n    spaces: 2,\n  });\n\n  process.exit(0);\n};\n\nmain().catch((err) => {\n  logger.error(\"Aborting installation...\");\n  if (err instanceof Error) {\n    logger.error(err);\n  } else {\n    logger.error(\n      \"An unknown error has occurred. Please open an issue on github with the below:\",\n    );\n    console.log(err);\n  }\n  process.exit(1);\n});\n","import type { AvailablePackages } from \"~/installers/index.js\";\nimport chalk from \"chalk\";\nimport { Command } from \"commander\";\nimport inquirer from \"inquirer\";\nimport { CREATE_T3_APP, DEFAULT_APP_NAME } from \"~/consts.js\";\nimport { availablePackages } from \"~/installers/index.js\";\nimport { getVersion } from \"~/utils/getT3Version.js\";\nimport { getUserPkgManager } from \"~/utils/getUserPkgManager.js\";\nimport { logger } from \"~/utils/logger.js\";\nimport { validateAppName } from \"~/utils/validateAppName.js\";\n\ninterface CliFlags {\n  noGit: boolean;\n  noInstall: boolean;\n  default: boolean;\n}\n\ninterface CliResults {\n  appName: string;\n  packages: AvailablePackages[];\n  flags: CliFlags;\n}\n\nconst defaultOptions: CliResults = {\n  appName: DEFAULT_APP_NAME,\n  packages: [\"nextAuth\", \"prisma\", \"tailwind\", \"trpc\"],\n  flags: {\n    noGit: false,\n    noInstall: false,\n    default: false,\n  },\n};\n\nexport const runCli = async () => {\n  const cliResults = defaultOptions;\n\n  const program = new Command().name(CREATE_T3_APP);\n\n  // TODO: This doesn't return anything typesafe. Research other options?\n  // Emulate from: https://github.com/Schniz/soundtype-commander\n  program\n    .description(\"A CLI for creating web applications with the t3 stack\")\n    .argument(\n      \"[dir]\",\n      \"The name of the application, as well as the name of the directory to create\",\n    )\n    .option(\n      \"--noGit\",\n      \"Explicitly tell the CLI to not initialize a new git repo in the project\",\n      false,\n    )\n    .option(\n      \"--noInstall\",\n      \"Explicitly tell the CLI to not run the package manager's install command\",\n      false,\n    )\n    .option(\n      \"-y, --default\",\n      \"Bypass the CLI and use all default options to bootstrap a new t3-app\",\n      false,\n    )\n    .version(getVersion(), \"-v, --version\", \"Display the version number\")\n    .addHelpText(\n      \"afterAll\",\n      `\\n The t3 stack was inspired by ${chalk\n        .hex(\"#E8DCFF\")\n        .bold(\n          \"@t3dotgg\",\n        )} and has been used to build awesome fullstack applications like ${chalk\n        .hex(\"#E24A8D\")\n        .underline(\"https://ping.gg\")} \\n`,\n    )\n    .parse(process.argv);\n\n  // FIXME: TEMPORARY WARNING WHEN USING YARN 3. SEE ISSUE #57\n  if (process.env.npm_config_user_agent?.startsWith(\"yarn/3\")) {\n    logger.warn(`  WARNING: It looks like you are using Yarn 3. This is currently not supported,\n  and likely to result in a crash. Please run create-t3-app with another\n  package manager such as pnpm, npm, or Yarn Classic.\n  See: https://github.com/t3-oss/create-t3-app/issues/57`);\n  }\n\n  // FIXME: TEMPORARY WARNING WHEN USING NODE 18. SEE ISSUE #59\n  if (process.versions.node.startsWith(\"18\")) {\n    logger.warn(`  WARNING: You are using Node.js version 18. This is currently not compatible with Next-Auth.\n  If you want to use Next-Auth, switch to a previous version of Node, e.g. 16 (LTS).\n  If you have nvm installed, use 'nvm install --lts' to switch to the latest LTS version of Node.\n    `);\n\n    cliResults.packages = cliResults.packages.filter(\n      (val) => val !== \"nextAuth\",\n    );\n  }\n\n  // Needs to be seperated outside the if statement to correctly infer the type as string | undefined\n  const cliProvidedName = program.args[0];\n  if (cliProvidedName) {\n    cliResults.appName = cliProvidedName;\n  }\n\n  cliResults.flags = program.opts();\n\n  const pkgManager = getUserPkgManager();\n\n  // Explained below why this is in a try/catch block\n  try {\n    if (!cliResults.flags.default) {\n      if (!cliProvidedName) {\n        const { appName } = await inquirer.prompt<Pick<CliResults, \"appName\">>({\n          name: \"appName\",\n          type: \"input\",\n          message: \"What will your project be called?\",\n          default: defaultOptions.appName,\n          validate: validateAppName,\n          transformer: (input: string) => {\n            return input.trim();\n          },\n        });\n        cliResults.appName = appName;\n      }\n\n      const { language } = await inquirer.prompt<{ language: string }>({\n        name: \"language\",\n        type: \"list\",\n        message: \"Will you be using JavaScript or TypeScript?\",\n        choices: [\n          { name: \"TypeScript\", value: \"typescript\", short: \"TypeScript\" },\n          { name: \"JavaScript\", value: \"javascript\", short: \"TypeScript\" }, // Both options should have 'TypeScript' as the short value to improve UX and reduce confusion\n        ],\n        default: \"typescript\",\n      });\n\n      if (language === \"javascript\") {\n        logger.error(\"Wrong answer, using TypeScript instead...\");\n      } else {\n        logger.success(\"Good choice! Using TypeScript!\");\n      }\n\n      const { packages } = await inquirer.prompt<Pick<CliResults, \"packages\">>({\n        name: \"packages\",\n        type: \"checkbox\",\n        message: \"Which packages would you like to enable?\",\n        choices: availablePackages\n          .filter((pkg) => pkg !== \"envVariables\") // dont prompt for env-vars\n          .map((pkgName) => ({\n            name: pkgName,\n            checked: false,\n            // FIXME: TEMPORARY WARNING WHEN USING NODE 18. SEE ISSUE #59\n            disabled:\n              pkgName === \"nextAuth\" && process.versions.node.startsWith(\"18\")\n                ? \"Node.js version 18 is currently not compatible with Next-Auth.\"\n                : false,\n          })),\n      });\n\n      cliResults.packages = packages;\n\n      // Skip if noGit flag provided\n      if (!cliResults.flags.noGit) {\n        const { git } = await inquirer.prompt<{ git: boolean }>({\n          name: \"git\",\n          type: \"confirm\",\n          message: \"Initialize a new git repository?\",\n          default: true,\n        });\n        if (git) {\n          logger.success(\"Nice one! Initializing repository!\");\n        } else {\n          cliResults.flags.noGit = true;\n          logger.info(\"Sounds good! You can come back and run git init later.\");\n        }\n      }\n\n      if (!cliResults.flags.noInstall) {\n        const { runInstall } = await inquirer.prompt<{ runInstall: boolean }>({\n          name: \"runInstall\",\n          type: \"confirm\",\n          message: `Would you like us to run ${pkgManager} install?`,\n          default: true,\n        });\n\n        if (runInstall) {\n          logger.success(\"Alright. We'll install the dependencies for you!\");\n        } else {\n          cliResults.flags.noInstall = true;\n          logger.info(\n            `No worries. You can run '${pkgManager} install' later to install the dependencies.`,\n          );\n        }\n      }\n    }\n  } catch (err) {\n    // If the user is not calling create-t3-app from an interactive terminal, inquirer will throw an error with isTTYError = true\n    // If this happens, we catch the error, tell the user what has happened, and then continue to run the program with a default t3 app\n    // eslint-disable-next-line -- Otherwise we have to do some fancy namespace extension logic on the Error type which feels overkill for one line\n    if (err instanceof Error && (err as any).isTTYError) {\n      logger.warn(\n        `${CREATE_T3_APP} needs an interactive terminal to provide options`,\n      );\n      logger.info(`Bootstrapping a default t3 app in ./${cliResults.appName}`);\n    } else {\n      throw err;\n    }\n  }\n\n  return cliResults;\n};\n","import path from \"path\";\nimport { fileURLToPath } from \"url\";\n\n// With the move to TSUP as a build tool, this keeps path routes in other files (installers, loaders, etc) in check more easily.\n// Path is in relation to a single index.js file inside ./dist\nconst __filename = fileURLToPath(import.meta.url);\nconst distPath = path.dirname(__filename);\nexport const PKG_ROOT = path.join(distPath, \"../\");\n\n//export const PKG_ROOT = path.dirname(require.main.filename);\n\nexport const TITLE_TEXT = `   ___ ___ ___   __ _____ ___   _____ ____    __   ___ ___\n  / __| _ \\\\ __| /  \\\\_   _| __| |_   _|__ /   /  \\\\ | _ \\\\ _ \\\\\n | (__|   / _| / /\\\\ \\\\| | | _|    | |  |_ \\\\  / /\\\\ \\\\|  _/  _/\n  \\\\___|_|_\\\\___|_/‾‾\\\\_\\\\_| |___|   |_| |___/ /_/‾‾\\\\_\\\\_| |_|\n`;\nexport const DEFAULT_APP_NAME = \"my-t3-app\";\nexport const CREATE_T3_APP = \"create-t3-app\";\n","import type { Installer } from \"~/installers/index.js\";\nimport path from \"path\";\nimport fs from \"fs-extra\";\nimport { PKG_ROOT } from \"~/consts.js\";\n\nexport const envVariablesInstaller: Installer = async ({\n  projectDir,\n  packages,\n}) => {\n  const usingAuth = packages?.nextAuth.inUse;\n  const usingPrisma = packages?.prisma.inUse;\n\n  const envAssetDir = path.join(PKG_ROOT, \"template/addons/env\");\n\n  let envFile = \"\";\n\n  switch (true) {\n    case usingAuth && usingPrisma:\n      envFile = \"auth-prisma-schema.mjs\";\n      break;\n    case usingAuth:\n      envFile = \"auth-schema.mjs\";\n      break;\n    case usingPrisma:\n      envFile = \"prisma-schema.mjs\";\n      break;\n  }\n\n  if (!envFile) return;\n\n  const envSchemaSrc = path.join(envAssetDir, envFile);\n  const envSchemaDest = path.join(projectDir, \"src/env/schema.mjs\");\n\n  const envExampleSrc = path.join(projectDir, \".env-example\");\n  const envDest = path.join(projectDir, \".env\");\n\n  await Promise.all([\n    fs.copy(envSchemaSrc, envSchemaDest, { overwrite: true }),\n    fs.rename(envExampleSrc, envDest),\n  ]);\n};\n","import type { Installer } from \"~/installers/index.js\";\nimport path from \"path\";\nimport fs from \"fs-extra\";\nimport { PKG_ROOT } from \"~/consts.js\";\n\nexport const nextAuthInstaller: Installer = async ({\n  projectDir,\n  runPkgManagerInstall,\n  packages,\n}) => {\n  await runPkgManagerInstall({\n    packages: [\n      \"next-auth\",\n      packages?.prisma.inUse ? \"@next-auth/prisma-adapter\" : \"\",\n    ],\n  });\n\n  const nextAuthAssetDir = path.join(PKG_ROOT, \"template/addons/next-auth\");\n\n  const apiHandlerSrc = path.join(\n    nextAuthAssetDir,\n    packages?.prisma.inUse ? \"api-handler-prisma.ts\" : \"api-handler.ts\",\n  );\n  const apiHandlerDest = path.join(\n    projectDir,\n    \"src/pages/api/auth/[...nextauth].ts\",\n  );\n\n  const restrictedApiSrc = path.join(nextAuthAssetDir, \"restricted.ts\");\n  const restrictedApiDest = path.join(\n    projectDir,\n    \"src/pages/api/restricted.ts\",\n  );\n\n  const nextAuthDefinitionSrc = path.join(nextAuthAssetDir, \"next-auth.d.ts\");\n  const nextAuthDefinitionDest = path.join(\n    projectDir,\n    \"src/types/next-auth.d.ts\",\n  );\n\n  await Promise.all([\n    fs.copy(apiHandlerSrc, apiHandlerDest),\n    fs.copy(restrictedApiSrc, restrictedApiDest),\n    fs.copy(nextAuthDefinitionSrc, nextAuthDefinitionDest),\n  ]);\n};\n","import type { PackageJson } from \"type-fest\";\nimport type { Installer } from \"~/installers/index.js\";\nimport path from \"path\";\nimport fs from \"fs-extra\";\nimport { PKG_ROOT } from \"~/consts.js\";\nimport { execa } from \"~/utils/execAsync.js\";\n\nexport const prismaInstaller: Installer = async ({\n  projectDir,\n  runPkgManagerInstall,\n  pkgManager,\n  packages,\n  noInstall,\n}) => {\n  await runPkgManagerInstall({\n    packages: [\"prisma\"],\n    devMode: true,\n  });\n  await runPkgManagerInstall({\n    packages: [\"@prisma/client\"],\n  });\n\n  const prismaAssetDir = path.join(PKG_ROOT, \"template/addons/prisma\");\n\n  const schemaSrc = path.join(\n    prismaAssetDir,\n    packages?.nextAuth.inUse ? \"auth-schema.prisma\" : \"schema.prisma\",\n  );\n  const schemaDest = path.join(projectDir, \"prisma/schema.prisma\");\n\n  const clientSrc = path.join(prismaAssetDir, \"client.ts\");\n  const clientDest = path.join(projectDir, \"src/server/db/client.ts\");\n\n  const sampleApiRouteSrc = path.join(prismaAssetDir, \"sample-api.ts\");\n  const sampleApiRouteDest = path.join(projectDir, \"src/pages/api/examples.ts\");\n\n  // add postinstall script to package.json\n  const packageJsonPath = path.join(projectDir, \"package.json\");\n\n  const packageJsonContent = fs.readJSONSync(packageJsonPath) as PackageJson;\n  packageJsonContent.scripts!.postinstall = \"prisma generate\"; //eslint-disable-line @typescript-eslint/no-non-null-assertion\n\n  await Promise.all([\n    fs.copy(schemaSrc, schemaDest),\n    fs.copy(clientSrc, clientDest),\n    fs.copy(sampleApiRouteSrc, sampleApiRouteDest),\n    fs.writeJSON(packageJsonPath, packageJsonContent, {\n      spaces: 2,\n    }),\n  ]);\n\n  // only generate client if we have installed the dependencies\n  if (!noInstall) {\n    const generateClientCmd =\n      pkgManager === \"npm\"\n        ? \"npx prisma generate\"\n        : `${pkgManager} prisma generate`;\n    await execa(generateClientCmd, { cwd: projectDir });\n  }\n};\n","import { exec } from \"child_process\";\nimport { promisify } from \"util\";\n\nexport const execa = promisify(exec);\n","import type { Installer } from \"~/installers/index.js\";\nimport path from \"path\";\nimport fs from \"fs-extra\";\nimport { PKG_ROOT } from \"~/consts.js\";\n\nexport const tailwindInstaller: Installer = async ({\n  projectDir,\n  runPkgManagerInstall,\n}) => {\n  await runPkgManagerInstall({\n    packages: [\"tailwindcss\", \"postcss\", \"autoprefixer\"],\n    devMode: true,\n  });\n\n  const twAssetDir = path.join(PKG_ROOT, \"template/addons/tailwind\");\n\n  const twCfgSrc = path.join(twAssetDir, \"tailwind.config.cjs\");\n  const twCfgDest = path.join(projectDir, \"tailwind.config.cjs\");\n\n  const postcssCfgSrc = path.join(twAssetDir, \"postcss.config.cjs\");\n  const postcssCfgDest = path.join(projectDir, \"postcss.config.cjs\");\n\n  const cssSrc = path.join(twAssetDir, \"globals.css\");\n  const cssDest = path.join(projectDir, \"src/styles/globals.css\");\n\n  await Promise.all([\n    fs.copy(twCfgSrc, twCfgDest),\n    fs.copy(postcssCfgSrc, postcssCfgDest),\n    fs.copy(cssSrc, cssDest),\n  ]);\n};\n","import type { Installer } from \"~/installers/index.js\";\nimport path from \"path\";\nimport fs from \"fs-extra\";\nimport { PKG_ROOT } from \"~/consts.js\";\n\nexport const trpcInstaller: Installer = async ({\n  projectDir,\n  packages,\n  runPkgManagerInstall,\n}) => {\n  await runPkgManagerInstall({\n    packages: [\n      \"react-query@3.39.2\",\n      \"superjson\",\n      \"@trpc/server\",\n      \"@trpc/client\",\n      \"@trpc/next\",\n      \"@trpc/react\",\n    ],\n  });\n  const usingAuth = packages?.nextAuth.inUse;\n  const usingPrisma = packages?.prisma.inUse;\n\n  const trpcAssetDir = path.join(PKG_ROOT, \"template/addons/trpc\");\n\n  const apiHandlerSrc = path.join(trpcAssetDir, \"api-handler.ts\");\n  const apiHandlerDest = path.join(projectDir, \"src/pages/api/trpc/[trpc].ts\");\n\n  const utilsSrc = path.join(trpcAssetDir, \"utils.ts\");\n  const utilsDest = path.join(projectDir, \"src/utils/trpc.ts\");\n\n  const contextFile =\n    usingAuth && usingPrisma\n      ? \"auth-prisma-context.ts\"\n      : usingAuth && !usingPrisma\n      ? \"auth-context.ts\"\n      : !usingAuth && usingPrisma\n      ? \"prisma-context.ts\"\n      : \"base-context.ts\";\n  const contextSrc = path.join(trpcAssetDir, contextFile);\n  const contextDest = path.join(projectDir, \"src/server/router/context.ts\");\n\n  const indexRouterFile = usingAuth\n    ? \"auth-index-router.ts\"\n    : \"index-router.ts\";\n  const indexRouterSrc = path.join(trpcAssetDir, indexRouterFile);\n  const indexRouterDest = path.join(projectDir, \"src/server/router/index.ts\");\n\n  const exampleRouterFile = usingPrisma\n    ? \"example-prisma-router.ts\"\n    : \"example-router.ts\";\n  const exampleRouterSrc = path.join(trpcAssetDir, exampleRouterFile);\n  const exampleRouterDest = path.join(\n    projectDir,\n    \"src/server/router/example.ts\",\n  );\n\n  const protectedExampleRouterSrc = path.join(\n    trpcAssetDir,\n    \"protected-example-router.ts\",\n  );\n  const protectedExampleRouterDest = path.join(\n    projectDir,\n    \"src/server/router/protected-example-router.ts\",\n  );\n\n  const protectedRouterSrc = path.join(trpcAssetDir, \"protected-router.ts\");\n  const protectedRouterDest = path.join(\n    projectDir,\n    \"src/server/router/protected-router.ts\",\n  );\n\n  await Promise.all([\n    fs.copy(apiHandlerSrc, apiHandlerDest),\n    fs.copy(utilsSrc, utilsDest),\n    fs.copy(contextSrc, contextDest),\n    fs.copy(indexRouterSrc, indexRouterDest),\n    fs.copy(exampleRouterSrc, exampleRouterDest),\n    ...(usingAuth\n      ? [\n          fs.copy(protectedExampleRouterSrc, protectedExampleRouterDest),\n          fs.copy(protectedRouterSrc, protectedRouterDest),\n        ]\n      : []),\n  ]);\n};\n","import type { PackageManager } from \"~/utils/getUserPkgManager.js\";\nimport type { CurriedRunPkgManagerInstallOptions } from \"~/utils/runPkgManagerInstall.js\";\nimport { envVariablesInstaller as envVariablesInstaller } from \"~/installers/envVars.js\";\nimport { nextAuthInstaller } from \"~/installers/next-auth.js\";\nimport { prismaInstaller } from \"~/installers/prisma.js\";\nimport { tailwindInstaller } from \"~/installers/tailwind.js\";\nimport { trpcInstaller } from \"~/installers/trpc.js\";\n\n// Turning this into a const allows the list to be iterated over for programatically creating prompt options\n// Should increase extensability in the future\nexport const availablePackages = [\n  \"nextAuth\",\n  \"prisma\",\n  \"tailwind\",\n  \"trpc\",\n  \"envVariables\",\n] as const;\n\nexport type AvailablePackages = typeof availablePackages[number];\n\nexport interface InstallerOptions {\n  projectDir: string;\n  pkgManager: PackageManager;\n  noInstall: boolean;\n  packages?: PkgInstallerMap;\n  projectName?: string;\n  runPkgManagerInstall: (\n    opts: CurriedRunPkgManagerInstallOptions,\n  ) => Promise<void>;\n}\n\nexport type Installer = (opts: InstallerOptions) => Promise<void>;\n\nexport type PkgInstallerMap = {\n  [pkg in AvailablePackages]: {\n    inUse: boolean;\n    installer: Installer;\n  };\n};\n\nexport const buildPkgInstallerMap = (\n  packages: AvailablePackages[],\n): PkgInstallerMap => ({\n  nextAuth: {\n    inUse: packages.includes(\"nextAuth\"),\n    installer: nextAuthInstaller,\n  },\n  prisma: {\n    inUse: packages.includes(\"prisma\"),\n    installer: prismaInstaller,\n  },\n  tailwind: {\n    inUse: packages.includes(\"tailwind\"),\n    installer: tailwindInstaller,\n  },\n  trpc: {\n    inUse: packages.includes(\"trpc\"),\n    installer: trpcInstaller,\n  },\n  envVariables: {\n    inUse: packages.includes(\"prisma\") || packages.includes(\"nextAuth\"),\n    installer: envVariablesInstaller,\n  },\n});\n","import type { PackageJson } from \"type-fest\";\nimport path from \"path\";\nimport fs from \"fs-extra\";\nimport { PKG_ROOT } from \"~/consts.js\";\n\nexport const getVersion = () => {\n  const packageJsonPath = path.join(PKG_ROOT, \"package.json\");\n\n  const packageJsonContent = fs.readJSONSync(packageJsonPath) as PackageJson;\n\n  return packageJsonContent.version ?? \"1.0.0\";\n};\n","export type PackageManager = \"npm\" | \"pnpm\" | \"yarn\";\n\nexport const getUserPkgManager: () => PackageManager = () => {\n  // This environment variable is set by npm and yarn but pnpm seems less consistent\n  const userAgent = process.env.npm_config_user_agent;\n\n  if (userAgent?.startsWith(\"yarn\")) return \"yarn\";\n  if (userAgent?.startsWith(\"pnpm\")) return \"pnpm\";\n\n  return \"npm\";\n};\n","import chalk from \"chalk\";\n\nexport const logger = {\n  error(...args: unknown[]) {\n    console.log(chalk.red(...args));\n  },\n  warn(...args: unknown[]) {\n    console.log(chalk.yellow(...args));\n  },\n  info(...args: unknown[]) {\n    console.log(chalk.cyan(...args));\n  },\n  success(...args: unknown[]) {\n    console.log(chalk.green(...args));\n  },\n};\n","const validationRegExp =\n  /^(?:@[a-z0-9-*~][a-z0-9-*._~]*\\/)?[a-z0-9-~][a-z0-9-._~]*$/;\n\n//Validate a string against allowed package.json names\nexport const validateAppName = (input: string) => {\n  const paths = input.split(\"/\");\n\n  // If the first part is a @, it's a scoped package\n  const indexOfDelimiter = paths.findIndex((p) => p.startsWith(\"@\"));\n\n  let appName = paths[paths.length - 1];\n  if (paths.findIndex((p) => p.startsWith(\"@\")) !== -1) {\n    appName = paths.slice(indexOfDelimiter).join(\"/\");\n  }\n\n  if (validationRegExp.test(appName ?? \"\")) {\n    return true;\n  } else {\n    return \"App name must be lowercase, alphanumeric, and only use -, _, and @\";\n  }\n};\n","import type { PkgInstallerMap } from \"~/installers/index.js\";\nimport path from \"path\";\nimport { installPackages } from \"~/helpers/installPackages.js\";\nimport { scaffoldProject } from \"~/helpers/scaffoldProject.js\";\nimport { selectAppFile, selectIndexFile } from \"~/helpers/selectBoilerplate.js\";\nimport { getUserPkgManager } from \"~/utils/getUserPkgManager.js\";\nimport { curryRunPkgManagerInstall } from \"~/utils/runPkgManagerInstall.js\";\n\ninterface CreateProjectOptions {\n  projectName: string;\n  packages: PkgInstallerMap;\n  noInstall: boolean;\n}\n\nexport const createProject = async ({\n  projectName,\n  packages,\n  noInstall,\n}: CreateProjectOptions) => {\n  const pkgManager = getUserPkgManager();\n  const projectDir = path.resolve(process.cwd(), projectName);\n  const runPkgManagerInstall = curryRunPkgManagerInstall({\n    projectDir,\n    pkgManager,\n    devMode: false,\n    noInstallMode: noInstall,\n  });\n\n  // Bootstraps the base Next.js application\n  await scaffoldProject({\n    projectName,\n    projectDir,\n    pkgManager,\n    noInstall,\n    runPkgManagerInstall,\n  });\n\n  // Install the selected packages\n  await installPackages({\n    projectDir,\n    pkgManager,\n    packages,\n    noInstall,\n    runPkgManagerInstall,\n  });\n\n  // TODO: Look into using handlebars or other templating engine to scaffold without needing to maintain multiple copies of the same file\n  await selectAppFile({ projectDir, packages });\n  await selectIndexFile({ projectDir, packages });\n\n  return projectDir;\n};\n","import type { InstallerOptions, PkgInstallerMap } from \"../installers/index.js\";\nimport chalk from \"chalk\";\nimport ora from \"ora\";\nimport { logger } from \"~/utils/logger.js\";\n\ntype InstallPackagesOptions = {\n  packages: PkgInstallerMap;\n} & InstallerOptions;\n// This runs the installer for all the packages that the user has selected\nexport const installPackages = async (options: InstallPackagesOptions) => {\n  const { packages, noInstall } = options;\n  logger.info(`${noInstall ? \"Adding\" : \"Installing\"} packages...`);\n\n  for (const [name, pkgOpts] of Object.entries(packages)) {\n    if (pkgOpts.inUse) {\n      const spinner = ora(\n        `${noInstall ? \"Adding\" : \"Installing\"} ${name}...`,\n      ).start();\n      await pkgOpts.installer(options);\n      spinner.succeed(\n        chalk.green(\n          `Successfully ${noInstall ? \"added\" : \"installed\"} ${chalk.green.bold(\n            name,\n          )}`,\n        ),\n      );\n    }\n  }\n  logger.info(\"\");\n};\n","import path from \"path\";\nimport chalk from \"chalk\";\nimport fs from \"fs-extra\";\nimport inquirer from \"inquirer\";\nimport ora from \"ora\";\nimport { PKG_ROOT } from \"~/consts.js\";\nimport { InstallerOptions } from \"~/installers/index.js\";\nimport { execa } from \"~/utils/execAsync.js\";\nimport { logger } from \"~/utils/logger.js\";\n\n// This bootstraps the base Next.js application\nexport const scaffoldProject = async ({\n  projectName,\n  projectDir,\n  pkgManager,\n  noInstall,\n}: InstallerOptions) => {\n  const srcDir = path.join(PKG_ROOT, \"template/base\");\n\n  if (!noInstall) {\n    logger.info(`\\nUsing: ${chalk.cyan.bold(pkgManager)}\\n`);\n  } else {\n    logger.info(\"\");\n  }\n\n  const spinner = ora(`Scaffolding in: ${projectDir}...\\n`).start();\n\n  if (fs.existsSync(projectDir)) {\n    if (fs.readdirSync(projectDir).length === 0) {\n      spinner.info(\n        `${chalk.cyan.bold(projectName)} exists but is empty, continuing...\\n`,\n      );\n    } else {\n      spinner.stopAndPersist();\n      const { overwriteDir } = await inquirer.prompt<{ overwriteDir: boolean }>(\n        {\n          name: \"overwriteDir\",\n          type: \"confirm\",\n          message: `${chalk.redBright.bold(\"Warning:\")} ${chalk.cyan.bold(\n            projectName,\n          )} already exists and isn't empty. Do you want to overwrite it?`,\n          default: false,\n        },\n      );\n      if (!overwriteDir) {\n        spinner.fail(\"Aborting installation...\");\n        process.exit(0);\n      } else {\n        spinner.info(\n          `Emptying ${chalk.cyan.bold(projectName)} and creating t3 app..\\n`,\n        );\n        fs.emptyDirSync(projectDir);\n      }\n    }\n  }\n\n  spinner.start();\n\n  await fs.copy(srcDir, projectDir);\n  await fs.rename(\n    path.join(projectDir, \"_gitignore\"),\n    path.join(projectDir, \".gitignore\"),\n  );\n\n  if (!noInstall) {\n    await execa(`${pkgManager} install`, { cwd: projectDir });\n  }\n  spinner.succeed(`${chalk.cyan.bold(projectName)} scaffolded successfully!\\n`);\n};\n","import type { InstallerOptions } from \"~/installers/index.js\";\nimport path from \"path\";\nimport fs from \"fs-extra\";\nimport { PKG_ROOT } from \"~/consts.js\";\n\ntype SelectBoilerplateProps = Required<\n  Pick<InstallerOptions, \"projectDir\" | \"packages\">\n>;\n// This generates the _app.tsx file that is used to render the app\nexport const selectAppFile = async ({\n  projectDir,\n  packages,\n}: SelectBoilerplateProps) => {\n  const appFileDir = path.join(PKG_ROOT, \"template/page-studs/_app\");\n\n  const usingTrpc = packages.trpc.inUse;\n  const usingNextAuth = packages.nextAuth.inUse;\n\n  let appFile = \"\";\n  if (usingNextAuth && usingTrpc) {\n    appFile = \"with-auth-trpc.tsx\";\n  } else if (usingNextAuth && !usingTrpc) {\n    appFile = \"with-auth.tsx\";\n  } else if (!usingNextAuth && usingTrpc) {\n    appFile = \"with-trpc.tsx\";\n  }\n\n  if (appFile !== \"\") {\n    const appSrc = path.join(appFileDir, appFile);\n    const appDest = path.join(projectDir, \"src/pages/_app.tsx\");\n    await fs.copy(appSrc, appDest);\n  }\n};\n\n// This selects the proper index.tsx to be used that showcases the chosen tech\nexport const selectIndexFile = async ({\n  projectDir,\n  packages,\n}: SelectBoilerplateProps) => {\n  const indexFileDir = path.join(PKG_ROOT, \"template/page-studs/index\");\n\n  const usingTrpc = packages.trpc.inUse;\n  const usingTw = packages.tailwind.inUse;\n  const usingAuth = packages.nextAuth.inUse;\n  const usingPrisma = packages.prisma.inUse;\n\n  let indexFile = \"\";\n  // FIXME: auth showcase doesn't work with prisma since it requires more setup\n  if (usingTrpc && usingTw && usingAuth && !usingPrisma) {\n    indexFile = \"with-auth-trpc-tw.tsx\";\n  } else if (usingTrpc && !usingTw && usingAuth && !usingPrisma) {\n    indexFile = \"with-auth-trpc.tsx\";\n  } else if (usingTrpc && usingTw) {\n    indexFile = \"with-trpc-tw.tsx\";\n  } else if (usingTrpc && !usingTw) {\n    indexFile = \"with-trpc.tsx\";\n  } else if (!usingTrpc && usingTw) {\n    indexFile = \"with-tw.tsx\";\n  }\n\n  if (indexFile !== \"\") {\n    const indexSrc = path.join(indexFileDir, indexFile);\n    const indexDest = path.join(projectDir, \"src/pages/index.tsx\");\n    await fs.copy(indexSrc, indexDest);\n  }\n};\n","import type { PackageManager } from \"~/utils/getUserPkgManager.js\";\nimport path from \"path\";\nimport fs from \"fs-extra\";\nimport { type PackageJson } from \"type-fest\";\nimport { execa } from \"~/utils/execAsync.js\";\nimport { logger } from \"~/utils/logger.js\";\n\nexport interface RunPkgManagerInstallOptions {\n  pkgManager: PackageManager;\n  devMode: boolean;\n  projectDir: string;\n  packages: string[];\n  noInstallMode: boolean;\n}\n\nexport const runPkgManagerInstall = async (\n  opts: RunPkgManagerInstallOptions,\n) => {\n  const { pkgManager, devMode, projectDir, packages, noInstallMode } = opts;\n\n  if (noInstallMode) {\n    const pkgJson = (await fs.readJSON(\n      path.join(projectDir, \"package.json\"),\n    )) as PackageJson;\n\n    for (const pkg of packages) {\n      if (pkg === \"\") {\n        // sometimes empty string is passed as a package when using ternaries so escaping that to prevent it pulling node's version\n        continue;\n      }\n      const { stdout: latestVersion } = await execa(`npm show ${pkg} version`);\n      if (!latestVersion) {\n        logger.warn(\"WARN: Failed to resolve latest version of package:\", pkg);\n        continue;\n      }\n\n      const pkgName = pkg.replace(/^(@?[^@]+)(?:@.+)?$/, \"$1\");\n\n      // Note: We know that pkgJson.[dev]Dependencies exists in the base Next.js template so we don't need to validate it\n      if (devMode) {\n        pkgJson.devDependencies![pkgName] = `^${latestVersion.trim()}`; //eslint-disable-line @typescript-eslint/no-non-null-assertion\n      } else {\n        pkgJson.dependencies![pkgName] = `^${latestVersion.trim()}`; //eslint-disable-line @typescript-eslint/no-non-null-assertion\n      }\n    }\n\n    await fs.writeJSON(path.join(projectDir, \"package.json\"), pkgJson, {\n      spaces: 2,\n    });\n    return;\n  }\n\n  const installCmd =\n    pkgManager === \"yarn\" ? `${pkgManager} add` : `${pkgManager} install`;\n  const flag = devMode ? \"-D\" : \"\";\n  const fullCmd = `${installCmd} ${flag} ${packages.join(\" \")}`;\n  await execa(fullCmd, { cwd: projectDir });\n};\n\nexport type CurryRunPkgManagerInstallOptions = Omit<\n  RunPkgManagerInstallOptions,\n  \"packages\"\n>;\n\nexport type CurriedRunPkgManagerInstallOptions =\n  Partial<CurryRunPkgManagerInstallOptions> &\n    Omit<RunPkgManagerInstallOptions, keyof CurryRunPkgManagerInstallOptions>;\n\nexport const curryRunPkgManagerInstall = (\n  baseOptions: CurryRunPkgManagerInstallOptions,\n) => {\n  const curriedRunPkgManagerInstall = async (\n    options: CurriedRunPkgManagerInstallOptions,\n  ) =>\n    runPkgManagerInstall({\n      ...baseOptions,\n      ...options,\n    });\n\n  return curriedRunPkgManagerInstall;\n};\n","import chalk from \"chalk\";\nimport ora from \"ora\";\nimport { execa } from \"~/utils/execAsync.js\";\nimport { logger } from \"~/utils/logger.js\";\n\n// This initializes the Git-repository for the project\nexport const initializeGit = async (projectDir: string) => {\n  logger.info(\"Initializing Git...\");\n  const spinner = ora(\"Creating a new git repo...\\n\").start();\n  try {\n    let initCmd = \"git init --initial-branch=main\";\n\n    // --initial-branch flag was added in git v2.28.0\n    const { stdout: gitVersionOutput } = await execa(\"git --version\"); // git version 2.32.0 ...\n    const gitVersionTag = gitVersionOutput.split(\" \")[2];\n    const major = gitVersionTag?.split(\".\")[0];\n    const minor = gitVersionTag?.split(\".\")[1];\n    if (Number(major) < 2 || Number(minor) < 28) {\n      initCmd = \"git init && git branch -m main\";\n    }\n\n    await execa(initCmd, { cwd: projectDir });\n    spinner.succeed(\n      `${chalk.green(\"Successfully initialized\")} ${chalk.green.bold(\"git\")}\\n`,\n    );\n  } catch (error) {\n    spinner.fail(\n      `${chalk.bold.red(\n        \"Failed:\",\n      )} could not initialize git. Update git to the latest version!\\n`,\n    );\n  }\n};\n","import type { InstallerOptions } from \"~/installers/index.js\";\nimport { DEFAULT_APP_NAME } from \"~/consts.js\";\nimport { getUserPkgManager } from \"~/utils/getUserPkgManager.js\";\nimport { logger } from \"~/utils/logger.js\";\n\n// This logs the next steps that the user should take in order to advance the project\nexport const logNextSteps = ({\n  projectName = DEFAULT_APP_NAME,\n  packages,\n  noInstall,\n}: Pick<InstallerOptions, \"projectName\" | \"packages\" | \"noInstall\">) => {\n  const pkgManager = getUserPkgManager();\n\n  logger.info(\"Next steps:\");\n  logger.info(`  cd ${projectName}`);\n  if (noInstall) {\n    logger.info(`  ${pkgManager} install`);\n  }\n\n  if (packages?.prisma.inUse) {\n    logger.info(\n      `  ${pkgManager === \"npm\" ? \"npx\" : pkgManager} prisma db push`,\n    );\n  }\n\n  logger.info(`  ${pkgManager === \"npm\" ? \"npm run\" : pkgManager} dev`);\n};\n","/**\n *  Parses the appName and its path from the user input.\n * Returns an array of [appName, path] where appName is the name put in the package.json and\n *   path is the path to the directory where the app will be created.\n * If the appName is '.', the name of the directory will be used instead.\n * Handles the case where the input includes a scoped package name\n * in which case that is being parsed as the name, but not included as the path\n * e.g. dir/@mono/app => [\"@mono/app\", \"dir/app\"]\n * e.g. dir/app => [\"app\", \"dir/app\"]\n **/\nexport const parseNameAndPath = (input: string) => {\n  const paths = input.split(\"/\");\n\n  let appName = paths[paths.length - 1];\n\n  // If the user ran `npx create-t3-app .` or similar, the appName should be the current directory\n  if (appName === \".\") {\n    appName = process.cwd().split(\"/\").pop();\n  }\n\n  // If the first part is a @, it's a scoped package\n  const indexOfDelimiter = paths.findIndex((p) => p.startsWith(\"@\"));\n  if (paths.findIndex((p) => p.startsWith(\"@\")) !== -1) {\n    appName = paths.slice(indexOfDelimiter).join(\"/\");\n  }\n\n  const path = paths.filter((p) => !p.startsWith(\"@\")).join(\"/\");\n\n  return [appName, path] as const;\n};\n","import gradient from \"gradient-string\";\nimport { TITLE_TEXT } from \"~/consts.js\";\nimport { getUserPkgManager } from \"~/utils/getUserPkgManager.js\";\n\n// colors brought in from vscode poimandres theme\nconst poimandresTheme = {\n  blue: \"#add7ff\",\n  cyan: \"#89ddff\",\n  green: \"#5de4c7\",\n  magenta: \"#fae4fc\",\n  red: \"#d0679d\",\n  yellow: \"#fffac2\",\n};\n\nexport const renderTitle = () => {\n  const t3Gradient = gradient(Object.values(poimandresTheme));\n\n  // resolves weird behavior where the ascii is offset\n  const pkgManager = getUserPkgManager();\n  if (pkgManager === \"yarn\" || pkgManager === \"pnpm\") {\n    console.log(\"\");\n  }\n  console.log(t3Gradient.multiline(TITLE_TEXT));\n};\n"],"mappings":"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","names":[]}